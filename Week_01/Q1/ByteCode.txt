  Last modified 2021/1/8; size 698 bytes
  MD5 checksum 38732b5cd196017046880a0881c9cb5a
  Compiled from "Hello.java"
public class Hello
  minor version: 0
  major version: 52
  flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
   #1 = Methodref          #6.#28         // java/lang/Object."<init>":()V
   #2 = Fieldref           #29.#30        // java/lang/System.out:Ljava/io/PrintStream;
   #3 = String             #31            // Test String Append....
   #4 = Methodref          #32.#33        // java/io/PrintStream.println:(Ljava/lang/String;)V
   #5 = Class              #34            // Hello
   #6 = Class              #35            // java/lang/Object
   #7 = Utf8               <init>
   #8 = Utf8               ()V
   #9 = Utf8               Code
  #10 = Utf8               LineNumberTable
  #11 = Utf8               LocalVariableTable
  #12 = Utf8               this
  #13 = Utf8               LHello;
  #14 = Utf8               main
  #15 = Utf8               ([Ljava/lang/String;)V
  #16 = Utf8               i
  #17 = Utf8               I
  #18 = Utf8               args
  #19 = Utf8               [Ljava/lang/String;
  #20 = Utf8               a
  #21 = Utf8               b
  #22 = Utf8               c
  #23 = Utf8               D
  #24 = Utf8               StackMapTable
  #25 = Class              #19            // "[Ljava/lang/String;"
  #26 = Utf8               SourceFile
  #27 = Utf8               Hello.java
  #28 = NameAndType        #7:#8          // "<init>":()V
  #29 = Class              #36            // java/lang/System
  #30 = NameAndType        #37:#38        // out:Ljava/io/PrintStream;
  #31 = Utf8               Test String Append....
  #32 = Class              #39            // java/io/PrintStream
  #33 = NameAndType        #40:#41        // println:(Ljava/lang/String;)V
  #34 = Utf8               Hello
  #35 = Utf8               java/lang/Object
  #36 = Utf8               java/lang/System
  #37 = Utf8               out
  #38 = Utf8               Ljava/io/PrintStream;
  #39 = Utf8               java/io/PrintStream
  #40 = Utf8               println
  #41 = Utf8               (Ljava/lang/String;)V
{
  public Hello();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 5: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   LHello;

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=6, args_size=1
         0: bipush        100           -- 0x10  bipush 将单字节的常量值 (-128~127) 推送至栈顶
         2: istore_1                    -- 0x3c istore_1  将栈顶 int 型数值存入第二个本地变量
         3: iconst_5                    -- 0x08 iconst_5  将 int 型 5 推送至栈顶
         4: istore_2
         5: dconst_0                    -- 0x0e  dconst_0  将 double 型 0 推送至栈顶
         6: dstore_3                    -- 0x4a dstore_3  将栈顶 double 型数值存入第四个本地变量
         7: iconst_0                    -- 0x03 iconst_0  将 int 型 0 推送至栈顶
         8: istore        5             -- 0x1b iload_1 将第二个 int 型本地变量
        10: iload         5             -- 0x15 iload 将指定的 int 型本地变量 (LocalVariableTable : 5)
        12: iload_1
        13: if_icmpge     27            -- 0xa2  if_icmpge 比较栈顶两 int 型数值大小，当结果大于等于 0 时跳转            
        16: iload         5
        18: iconst_2
        19: imul                        -- 0x68 imul  将栈顶两 int 型数值相乘并将结果压入栈顶
        20: istore_2    
        21: iinc          5, 1          -- 将指定 int 型变量增加指定值（LocalVariableTable slot 5 , i+1 ）
        24: goto          10            -- 0xa7  goto  无条件跳转  （跳轉至 10: iload 5 )
        27: iload_2
        28: iload_1 
        29: if_icmple     40                  -- 0xa4  if_icmple 比较栈顶两 int 型数值大小，当结果小于等于 0 时跳转
        32: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;               -- 0xb2 getstatic 获取指定类的静态域，并将其值压入栈顶
        35: ldc           #3                  // String Test String Append....                                  -- System.out.println("Test " + "String " + "Append....");  可觀察到JVM自動將字串串接
        37: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V
        40: return
      LineNumberTable:
        line 8: 0
        line 9: 3
        line 10: 5
        line 12: 7
        line 13: 16
        line 12: 21
        line 16: 27
        line 17: 32
        line 19: 40
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           10      17     5     i   I
            0      41     0  args   [Ljava/lang/String;
            3      38     1     a   I
            5      36     2     b   I
            7      34     3     c   D                     -- 觀察到 double占兩位 Slot
      StackMapTable: number_of_entries = 3
        frame_type = 255 /* full_frame */
          offset_delta = 10
          locals = [ class "[Ljava/lang/String;", int, int, double, int ]
          stack = []
        frame_type = 250 /* chop */
          offset_delta = 16
        frame_type = 12 /* same */
}
